"""Add CheckoutSession table

Revision ID: ab0152669741
Revises: d99437ad53ef
Create Date: 2025-07-30 06:49:45.106304+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ab0152669741'
down_revision: Union[str, None] = 'd99437ad53ef'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('checkout_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('checkout_id', sa.String(), nullable=True),
    sa.Column('checkout_url', sa.String(), nullable=False),
    sa.Column('product_variant', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_checkout_sessions_checkout_id'), 'checkout_sessions', ['checkout_id'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_checkout_url'), 'checkout_sessions', ['checkout_url'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_created_at'), 'checkout_sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_expires_at'), 'checkout_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_id'), 'checkout_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_product_variant'), 'checkout_sessions', ['product_variant'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_status'), 'checkout_sessions', ['status'], unique=False)
    op.create_index(op.f('ix_checkout_sessions_user_id'), 'checkout_sessions', ['user_id'], unique=False)

    # Use batch_alter_table for SQLite compatibility
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('subscription_status',
                   existing_type=sa.VARCHAR(),
                   nullable=True,
                   existing_server_default=sa.text("'none'"))
        batch_op.alter_column('number_of_free_turns',
                   existing_type=sa.INTEGER(),
                   nullable=True,
                   existing_server_default=sa.text('3'))
        batch_op.alter_column('number_of_paid_turns',
                   existing_type=sa.INTEGER(),
                   nullable=True,
                   existing_server_default=sa.text('0'))

    # Handle cards table constraint separately
    with op.batch_alter_table('cards', schema=None) as batch_op:
        # Note: We're not dropping the unique constraint on name as it may not exist
        # or may have a different name. The constraint will be handled by the model definition.
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch_alter_table for SQLite compatibility
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('number_of_paid_turns',
                   existing_type=sa.INTEGER(),
                   nullable=False,
                   existing_server_default=sa.text('0'))
        batch_op.alter_column('number_of_free_turns',
                   existing_type=sa.INTEGER(),
                   nullable=False,
                   existing_server_default=sa.text('3'))
        batch_op.alter_column('subscription_status',
                   existing_type=sa.VARCHAR(),
                   nullable=False,
                   existing_server_default=sa.text("'none'"))

    # Handle cards table constraint separately
    with op.batch_alter_table('cards', schema=None) as batch_op:
        # Note: We're not recreating the unique constraint on name as it wasn't dropped
        # The constraint will be handled by the model definition.
        pass

    op.drop_index(op.f('ix_checkout_sessions_user_id'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_status'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_product_variant'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_id'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_expires_at'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_created_at'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_checkout_url'), table_name='checkout_sessions')
    op.drop_index(op.f('ix_checkout_sessions_checkout_id'), table_name='checkout_sessions')
    op.drop_table('checkout_sessions')
    # ### end Alembic commands ###
